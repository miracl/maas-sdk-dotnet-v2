using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Miracl
{
    #region VerificationStatus
    /// <summary>
    /// Status used to notify the user if the DVS verification succeeds or not
    /// </summary>
    public enum VerificationStatus
    {
        /// <summary>
        /// The signature verification is successful
        /// </summary>
        ValidSignature,
        /// <summary>
        /// Bad PIN or token
        /// </summary>
        BadPin,
        /// <summary>
        /// Identity revoked due to some invalid attempts
        /// </summary>
        UserBlocked,
        /// <summary>
        /// Unexpected server response, no signature received
        /// </summary>
        MissingSignature,
        /// <summary>
        /// The received signature is not valid
        /// </summary>
        InvalidSignature
    }
    #endregion

    #region VerificationResult
    /// <summary>
    /// Describes the result of a DVS signature verification
    /// </summary>
    public class VerificationResult
    {
        /// <summary>
        /// Gets the status.
        /// </summary>
        /// <value>
        /// The status.
        /// </value>
        public VerificationStatus Status { get; internal set; }

        /// <summary>
        /// Gets a value indicating whether the signature verification is valid.
        /// </summary>
        /// <value>
        ///   <c>true</c> if signature verification is valid; otherwise, <c>false</c>.
        /// </value>
        public bool IsSignatureValid { get; internal set; }
    }
    #endregion

    #region Signature class
    /// <summary>
    /// The payload signature sent to the DVS service which has to be verified.
    /// </summary>
    public class Signature
    {
        /// <summary>
        /// Gets or sets the hash of the signed document.
        /// </summary>
        /// <value>
        /// The hash.
        /// </value>
        [JsonProperty("hash")]
        public string Hash { get; set; }

        /// <summary>
        /// Gets or sets the M-Pin ID used to generate the signature.
        /// </summary>
        /// <value>
        /// The mpin identifier.
        /// </value>
        [JsonProperty("mpinid")]
        public string MpinId { get; set; }

        /// <summary>
        /// Gets or sets the random commitment generated by the user.
        /// </summary>
        /// <value>
        /// The random commitment generated by the user.
        /// </value>
        [JsonProperty("u")]
        public string U { get; set; }

        /// <summary>
        /// Gets or sets the proof of the signature.
        /// </summary>
        /// <value>
        /// The proof of the signature.
        /// </value>
        [JsonProperty("v")]
        public string V { get; set; }

        /// <summary>
        /// Gets or sets the user public key used in the key-escrow less scheme. Only if key-escrow less scheme is supported.
        /// </summary>
        /// <value>
        /// The public key.
        /// </value>
        [JsonProperty("publicKey")]
        public string PublicKey { get; set; }

        /// <summary>
        /// Gets or sets which DTAs are used for signing.
        /// </summary>
        /// <value>
        /// The DTAs.
        /// </value>
        [JsonProperty("dtas")]
        public string DTAs { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Signature"/> class. All properties are required!
        /// </summary>
        /// <param name="hash">The hash of the signed document.</param>
        /// <param name="mpinId">The M-Pin ID used to generate the signature.</param>
        /// <param name="u">The random commitment generated by the user.</param>
        /// <param name="v">The proof of the signature.</param>
        /// <param name="publicKey">The public key used in the key-escrow less scheme.</param>
        /// <param name="dtas">The DTAs used for signing.</param>
        /// <exception cref="System.ArgumentException">If any of the properies is null or empty.</exception>
        public Signature(string hash, string mpinId, string u, string v, string publicKey, string dtas)
        {
            this.Hash = hash;
            this.MpinId = mpinId;
            this.U = u;
            this.V = v;
            this.PublicKey = publicKey;
            this.DTAs = dtas;

            ValidateProperties();
        }

        private void ValidateProperties()
        {
            ValidateProperty(this.Hash);
            ValidateProperty(this.U);
            ValidateProperty(this.V);
            ValidateProperty(this.MpinId);
            ValidateProperty(this.PublicKey);
            ValidateProperty(this.DTAs);
        }

        private void ValidateProperty(string prop)
        {
            if (string.IsNullOrEmpty(prop))
            {
                throw new ArgumentNullException(prop);
            }
        }
    }
    #endregion

    #region Payload class

    /// <summary>
    /// Describes the jws payload sent to the DVS service.
    /// </summary>
    internal class Payload
    {
        /// <summary>
        /// Gets or sets the signature to verify.
        /// </summary>
        /// <value>
        /// The signature.
        /// </value>
        [JsonProperty("signature")]
        internal Signature Signature { get; set; }

        /// <summary>
        /// Gets or sets the epoch time (in seconds) of the signature creation.
        /// </summary>
        /// <value>
        /// The epoch time.
        /// </value>
        [JsonProperty("timestamp")]
        internal int Timestamp { get; set; }

        /// <summary>
        /// Gets or sets the type of action, in this case "verification".
        /// </summary>
        /// <value>
        /// The type of action.
        /// </value>
        [JsonProperty("type")]
        internal string Type { get; set; }
    }
    #endregion

}
