@model IdentityModel.Client.TokenResponse
@{
    ViewBag.Title = "DVS sign";
}
<div>
    <br />
    <div id="dvsRegisterResponse">
        <span>
            After you have been successfully authenticated you could register the identity to the DVS service in order to sign documents with it.
            <br />
            Please, press the button to proceed.
        </span>
    </div>
    <br />
    <div id="dvsRegister">
        <a class="btn btn-primary" onclick="dvsRegister()">DVS register</a>
    </div>
    <div id="dvsSign" class="hidden">
        <a class="btn btn-danger" onclick="dvsRemoveIdentity()">Remove signing identity</a>
        <br />
        <br />
        <label for="doc">Enter text to be signed: </label>
        <br />
        <textarea id="doc" style="margin-bottom:10px; margin-top:5px" rows="4" cols="50"></textarea>
        <br />
        <a class="btn btn-primary" onclick="dvsSign($('#doc').val())">Sign</a>
        <div id="signature" class="hidden">
            <br />
            <strong>Signature:</strong>
            <pre id="signatureData"></pre>
        </div>
        <br />
        <div id="verificationResult" class="hidden">
            <strong>Verification result:</strong>
            <pre></pre>
        </div>
    </div>
</div>
<hr />
<span>If you want to logout, press the button.</span>
@using (Html.BeginForm("Logout", "Home", FormMethod.Post))
{
    <button name="LogoutId" class="btn btn-default" type="submit">Logout</button>
}
<hr />
<span>You have been authenticated with identity <b id="userId">@ViewBag.Client.UserId</b> which has the following data.</span>
<br />
<p>
    <strong>Access token:</strong>
    <pre>@ViewBag.AccessTokenParsed</pre>
</p>
@if (ViewBag.ExpiresAt != null)
{
    <p>
        <strong>Expires:</strong>
        <br />
        @(DateTime.Now.AddSeconds(Model.ExpiresIn).ToString())
    </p>
}

@section scripts{    
    <link rel="stylesheet" type="text/css" href="https://cdn.mpin.io/dvs/css/dvs.css" media="screen" />
    <script type="text/javascript" src="https://cdn.mpin.io/dvs/dvs.client.min.js"></script>
    <script>
        var userId = "@ViewBag.Client.UserId";

        var dvs = new DVS({
            userId: userId,
            server: "@ViewBag.Client.Options.PlatformAPIAddress",
            clientId: "@ViewBag.Client.Options.ClientId",
            redirectURI: "@ViewBag.RedirectUri",
            pinPolicy: "different"
        });

        dvs.init(function () {
            dvs.hasIdentity(function success() {
                $("#dvsRegister").addClass("hidden");
                $("#dvsSign").removeClass("hidden");

                var element = $("#dvsRegisterResponse > span");
                element.removeClass("text-danger");
                element.html("An identity <b>@ViewBag.Client.UserId</b> has been registered for DVS. Now you can sign documents with it.");
            }, function fail() {
                console.log("Not registered");
            });
        });

        function dvsRegister() {
                var successCb = function () {
                    var element = $("#dvsRegisterResponse > span");
                    element.removeClass("text-danger");
                    element.html("An identity <b>@ViewBag.Client.UserId</b> has been registered for DVS. Now you can sign documents with it.");

                    $("#dvsRegister").addClass("hidden");
                    $("#dvsSign").removeClass("hidden");
                };

                var errorCb = function (error) {
                    var element = $("#dvsRegisterResponse > span");
                    element.addClass("text-danger");
                    element.html(error.message);
                    console.log(error);
                };

                dvs.createIdentity(successCb, errorCb);
        }

        function dvsSign(doc) {
            $("#verificationResult").addClass("hidden");

            $.ajax({
                url: "@Url.Action("CreateDocumentHash", "login")",
                type: "POST",
                data: { document: doc },
                dataType: "json",
                cache: false,
                success: function (documentData) {
                    dvs.sign({
                        doc: doc,
                        hash: documentData.hash,
                        timestamp: documentData.timestamp
                    }, function success(signature) {
                        console.info("Successful signature:");
                        $("#signatureData").html(JSON.stringify(signature, null, 4));
                        $("#signature").removeClass("hidden");
                        dvsVerifySignature(signature, documentData);
                    }, function fail(error) {
                        console.error(error);
                    });
                }
            });
        }

        function dvsVerifySignature(signature, documentData) {
            $.ajax({
                url: "@Url.Action("VerifySignature", "login")",
                type: "POST",
                data: { verificationData: JSON.stringify(signature), documentData: JSON.stringify(documentData) },
                dataType: "json",
                cache: false,
                success: function (res) {
                    $("#verificationResult").removeClass("hidden");
                    $("#verificationResult > pre").html(JSON.stringify(res, null, 4));
                }
            });
        }

        function dvsRemoveIdentity() {
            dvs.deleteIdentity(function () {
                console.info("Deleted identity");
                $("#dvsRegister").removeClass("hidden");
                $("#dvsSign").addClass("hidden");
            }, function () {
                console.error("Error while deleting identity");
            });
        }
    </script>
}